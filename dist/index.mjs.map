{"version":3,"sources":["../src/index.ts"],"sourcesContent":["class Numts {\r\n  constructor() {}\r\n  /**\r\n   * array\r\n   */\r\n  public array(arr: number[]) {\r\n    return arr;\r\n  }\r\n\r\n  /**\r\n   * full\r\n   */\r\n  public full(shape: [number, number], fillValue: number): number[][] {\r\n    const [rows, cols] = shape;\r\n    const result: number[][] = [];\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      const row: number[] = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push(fillValue);\r\n      }\r\n      result.push(row);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * zero\r\n   */\r\n  public zeros(shape: [number, number]): number[][] {\r\n    const [rows, cols] = shape;\r\n    const result: number[][] = [];\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      const row: number[] = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push(0);\r\n      }\r\n      result.push(row);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * ones\r\n   */\r\n  public ones(shape: [number, number]): number[][] {\r\n    const [rows, cols] = shape;\r\n    const result: number[][] = [];\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      const row: number[] = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push(1);\r\n      }\r\n      result.push(row);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * eyes\r\n   */\r\n  public eyes(size: number): number[][] {\r\n    const result: number[][] = [];\r\n\r\n    for (let i = 0; i < size; i++) {\r\n      const row: number[] = [];\r\n      for (let j = 0; j < size; j++) {\r\n        row.push(i === j ? 1 : 0);\r\n      }\r\n      result.push(row);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * random\r\n   */\r\n  public random(size: [number, number]): number[][] {\r\n    const [rows, cols] = size;\r\n    const result: number[][] = [];\r\n\r\n    for (let i = 0; i < rows; i++) {\r\n      const row: number[] = [];\r\n      for (let j = 0; j < cols; j++) {\r\n        row.push(Math.random());\r\n      }\r\n      result.push(row);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * clip\r\n   */\r\n  public clip(array: number[], min: number, max: number): number[] {\r\n    return array.map((value) => Math.min(Math.max(value, min), max));\r\n  }\r\n\r\n  /**\r\n   * where\r\n   */\r\n  public where(\r\n    array: number[],\r\n    condition: (value: number) => boolean\r\n  ): number[] {\r\n    const indices: number[] = [];\r\n    for (let i = 0; i < array.length; i++) {\r\n      if (condition(array[i])) {\r\n        indices.push(i);\r\n      }\r\n    }\r\n    return indices;\r\n  }\r\n\r\n  /**\r\n   * percentile\r\n   */\r\n  public percentile(array: number[], percentile: number): number {\r\n    const sortedArray = array.slice().sort((a, b) => a - b);\r\n    const index = (percentile / 100) * (sortedArray.length - 1);\r\n    if (Number.isInteger(index)) {\r\n      return sortedArray[index];\r\n    } else {\r\n      const lower = Math.floor(index);\r\n      const upper = Math.ceil(index);\r\n      return (sortedArray[lower] + sortedArray[upper]) / 2;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * sliceArrayFromIndex\r\n   */\r\n  public sliceIndex(array: number[], startIndex: number): number[] {\r\n    return array.slice(startIndex);\r\n  }\r\n\r\n  /**\r\n   * sliceArrayRange\r\n   */\r\n  public sliceArrayRange(\r\n    array: number[],\r\n    startIndex: number,\r\n    endIndex: number\r\n  ): number[] {\r\n    return array.slice(startIndex, endIndex);\r\n  }\r\n\r\n  /**\r\n   * sliceArrayFromIndexToEnd\r\n   */\r\n  public sliceToEnd(array: number[], startIndex: number): number[] {\r\n    return array.slice(startIndex);\r\n  }\r\n\r\n  /**\r\n   * sliceEndToEnd\r\n   */\r\n  public sliceEndToEnd(\r\n    array: number[],\r\n    startFromEnd: number,\r\n    endFromEnd: number\r\n  ): number[] {\r\n    return array.slice(-startFromEnd, -endFromEnd);\r\n  }\r\n\r\n  /**\r\n   * sliceWithStep\r\n   */\r\n  public sliceWithStep(\r\n    array: number[],\r\n    start: number,\r\n    end: number,\r\n    step: number\r\n  ): number[] {\r\n    const result: number[] = [];\r\n    for (let i = start; i < end; i += step) {\r\n      result.push(array[i]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * selectEvery\r\n   */\r\n  public selectEvery(array: number[], step: number = 2): number[] {\r\n    const result: number[] = [];\r\n    for (let i = 0; i < array.length; i += step) {\r\n      result.push(array[i]);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * sliceFromArray\r\n   */\r\n  public sliceFromArray(array: number[], start: number, end: number): number[] {\r\n    return array.slice(start, end);\r\n  }\r\n}\r\n\r\nexport { Numts };\r\n"],"mappings":"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","names":[]}